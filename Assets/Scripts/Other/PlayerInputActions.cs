//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""1f5b1af5-5f8c-4472-9284-72c434b7f0d0"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e621a5a6-4072-483a-808c-f00041cbb994"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interface"",
                    ""type"": ""Button"",
                    ""id"": ""3f369cfa-d419-439c-8084-6127aaf7095e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeadUse"",
                    ""type"": ""Button"",
                    ""id"": ""d7a9c6ac-4528-4f77-97d3-c835cecfa724"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainHandUse"",
                    ""type"": ""Button"",
                    ""id"": ""8f899640-23d6-44ae-9d79-8cb9b528887d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OffHandUse"",
                    ""type"": ""Button"",
                    ""id"": ""5d318be6-bf7c-41ae-ad67-b99f723bace9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LegsUse"",
                    ""type"": ""Button"",
                    ""id"": ""01693cac-c1e9-487b-8ca6-60134172ab5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hotbar"",
                    ""type"": ""Button"",
                    ""id"": ""cbe76031-b2f0-4c60-bf92-7ad0ce796b33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7d63a59b-797f-46b5-b7bc-4078e327dd97"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""58f0e575-143a-4540-a40e-e05ee481ebb8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e34d2bc2-08d8-4b99-b0e9-5ba791e8dc05"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f0f9470c-9411-4676-92e2-e0858cb97dff"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""01a4e99e-a897-490b-b7b7-4da4f21e6519"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c6d6b2c1-a676-4abe-a91d-c05342d35a99"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interface"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""572025e0-e585-4543-934c-bbca8f0a2eb0"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""adcc0eee-aea3-4337-b55f-096cf044ff2f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainHandUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c545ec1e-ada9-4fa0-8596-a8dbbb7c6dd6"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OffHandUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89735cce-8fda-4eed-9c26-dd3ded1905ca"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LegsUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9a941da-bd61-44f3-8867-979ef2aa5c52"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hotbar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
        m_Gameplay_Interface = m_Gameplay.FindAction("Interface", throwIfNotFound: true);
        m_Gameplay_HeadUse = m_Gameplay.FindAction("HeadUse", throwIfNotFound: true);
        m_Gameplay_MainHandUse = m_Gameplay.FindAction("MainHandUse", throwIfNotFound: true);
        m_Gameplay_OffHandUse = m_Gameplay.FindAction("OffHandUse", throwIfNotFound: true);
        m_Gameplay_LegsUse = m_Gameplay.FindAction("LegsUse", throwIfNotFound: true);
        m_Gameplay_Hotbar = m_Gameplay.FindAction("Hotbar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Movement;
    private readonly InputAction m_Gameplay_Interface;
    private readonly InputAction m_Gameplay_HeadUse;
    private readonly InputAction m_Gameplay_MainHandUse;
    private readonly InputAction m_Gameplay_OffHandUse;
    private readonly InputAction m_Gameplay_LegsUse;
    private readonly InputAction m_Gameplay_Hotbar;
    public struct GameplayActions
    {
        private @PlayerInputActions m_Wrapper;
        public GameplayActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
        public InputAction @Interface => m_Wrapper.m_Gameplay_Interface;
        public InputAction @HeadUse => m_Wrapper.m_Gameplay_HeadUse;
        public InputAction @MainHandUse => m_Wrapper.m_Gameplay_MainHandUse;
        public InputAction @OffHandUse => m_Wrapper.m_Gameplay_OffHandUse;
        public InputAction @LegsUse => m_Wrapper.m_Gameplay_LegsUse;
        public InputAction @Hotbar => m_Wrapper.m_Gameplay_Hotbar;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Interface.started += instance.OnInterface;
            @Interface.performed += instance.OnInterface;
            @Interface.canceled += instance.OnInterface;
            @HeadUse.started += instance.OnHeadUse;
            @HeadUse.performed += instance.OnHeadUse;
            @HeadUse.canceled += instance.OnHeadUse;
            @MainHandUse.started += instance.OnMainHandUse;
            @MainHandUse.performed += instance.OnMainHandUse;
            @MainHandUse.canceled += instance.OnMainHandUse;
            @OffHandUse.started += instance.OnOffHandUse;
            @OffHandUse.performed += instance.OnOffHandUse;
            @OffHandUse.canceled += instance.OnOffHandUse;
            @LegsUse.started += instance.OnLegsUse;
            @LegsUse.performed += instance.OnLegsUse;
            @LegsUse.canceled += instance.OnLegsUse;
            @Hotbar.started += instance.OnHotbar;
            @Hotbar.performed += instance.OnHotbar;
            @Hotbar.canceled += instance.OnHotbar;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Interface.started -= instance.OnInterface;
            @Interface.performed -= instance.OnInterface;
            @Interface.canceled -= instance.OnInterface;
            @HeadUse.started -= instance.OnHeadUse;
            @HeadUse.performed -= instance.OnHeadUse;
            @HeadUse.canceled -= instance.OnHeadUse;
            @MainHandUse.started -= instance.OnMainHandUse;
            @MainHandUse.performed -= instance.OnMainHandUse;
            @MainHandUse.canceled -= instance.OnMainHandUse;
            @OffHandUse.started -= instance.OnOffHandUse;
            @OffHandUse.performed -= instance.OnOffHandUse;
            @OffHandUse.canceled -= instance.OnOffHandUse;
            @LegsUse.started -= instance.OnLegsUse;
            @LegsUse.performed -= instance.OnLegsUse;
            @LegsUse.canceled -= instance.OnLegsUse;
            @Hotbar.started -= instance.OnHotbar;
            @Hotbar.performed -= instance.OnHotbar;
            @Hotbar.canceled -= instance.OnHotbar;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInterface(InputAction.CallbackContext context);
        void OnHeadUse(InputAction.CallbackContext context);
        void OnMainHandUse(InputAction.CallbackContext context);
        void OnOffHandUse(InputAction.CallbackContext context);
        void OnLegsUse(InputAction.CallbackContext context);
        void OnHotbar(InputAction.CallbackContext context);
    }
}
